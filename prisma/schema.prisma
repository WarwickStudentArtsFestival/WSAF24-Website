generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model account_emailaddress {
  id                        Int                         @id @default(autoincrement())
  email                     String                      @db.VarChar(254)
  verified                  Boolean
  primary                   Boolean
  user_id                   BigInt
  accounts_user             accounts_user               @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "account_emailaddress_user_id_2c513194_fk")
  account_emailconfirmation account_emailconfirmation[]

  @@unique([user_id, email], map: "account_emailaddress_user_id_email_987c8728_uniq")
  @@index([email], map: "account_emailaddress_email_03be32b2")
  @@index([email], map: "account_emailaddress_email_03be32b2_like")
  @@index([user_id], map: "account_emailaddress_user_id_2c513194")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model account_emailconfirmation {
  id                   Int                  @id @default(autoincrement())
  created              DateTime             @db.Timestamptz(6)
  sent                 DateTime?            @db.Timestamptz(6)
  key                  String               @unique @db.VarChar(64)
  email_address_id     Int
  account_emailaddress account_emailaddress @relation(fields: [email_address_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "account_emailconfirm_email_address_id_5b7f8c58_fk_account_e")

  @@index([email_address_id], map: "account_emailconfirmation_email_address_id_5b7f8c58")
  @@index([key], map: "account_emailconfirmation_key_f43612bd_like")
}

model accounts_user {
  id                             BigInt                           @id @default(autoincrement())
  password                       String                           @db.VarChar(128)
  last_login                     DateTime?                        @db.Timestamptz(6)
  is_superuser                   Boolean
  username                       String                           @unique @db.VarChar(150)
  first_name                     String                           @db.VarChar(150)
  last_name                      String                           @db.VarChar(150)
  email                          String                           @db.VarChar(254)
  is_staff                       Boolean
  is_active                      Boolean
  date_joined                    DateTime                         @db.Timestamptz(6)
  account_emailaddress           account_emailaddress[]
  accounts_user_groups           accounts_user_groups[]
  accounts_user_user_permissions accounts_user_user_permissions[]
  django_admin_log               django_admin_log[]
  schedule_event_admins          schedule_event_admins[]
  schedule_event_participants    schedule_event_participants[]
  socialaccount_socialaccount    socialaccount_socialaccount[]

  @@index([username], map: "accounts_user_username_6088629e_like")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model accounts_user_groups {
  id            BigInt        @id @default(autoincrement())
  user_id       BigInt
  group_id      Int
  auth_group    auth_group    @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "accounts_user_groups_group_id_bd11a704_fk_auth_group_id")
  accounts_user accounts_user @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "accounts_user_groups_user_id_52b62117_fk")

  @@unique([user_id, group_id], map: "accounts_user_groups_user_id_group_id_59c0b32f_uniq")
  @@index([group_id], map: "accounts_user_groups_group_id_bd11a704")
  @@index([user_id], map: "accounts_user_groups_user_id_52b62117")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model accounts_user_user_permissions {
  id              BigInt          @id @default(autoincrement())
  user_id         BigInt
  permission_id   Int
  auth_permission auth_permission @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "accounts_user_user_p_permission_id_113bb443_fk_auth_perm")
  accounts_user   accounts_user   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "accounts_user_user_permissions_user_id_e4f0a161_fk")

  @@unique([user_id, permission_id], map: "accounts_user_user_permi_user_id_permission_id_2ab516c2_uniq")
  @@index([permission_id], map: "accounts_user_user_permissions_permission_id_113bb443")
  @@index([user_id], map: "accounts_user_user_permissions_user_id_e4f0a161")
}

model auth_group {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @unique @db.VarChar(150)
  accounts_user_groups   accounts_user_groups[]
  auth_group_permissions auth_group_permissions[]

  @@index([name], map: "auth_group_name_a6ea08ec_like")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model auth_group_permissions {
  id              BigInt          @id @default(autoincrement())
  group_id        Int
  permission_id   Int
  auth_permission auth_permission @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_group_permissio_permission_id_84c5c92e_fk_auth_perm")
  auth_group      auth_group      @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_group_permissions_group_id_b120cbf9_fk_auth_group_id")

  @@unique([group_id, permission_id], map: "auth_group_permissions_group_id_permission_id_0cd325b0_uniq")
  @@index([group_id], map: "auth_group_permissions_group_id_b120cbf9")
  @@index([permission_id], map: "auth_group_permissions_permission_id_84c5c92e")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model auth_permission {
  id                             Int                              @id @default(autoincrement())
  name                           String                           @db.VarChar(255)
  content_type_id                Int
  codename                       String                           @db.VarChar(100)
  accounts_user_user_permissions accounts_user_user_permissions[]
  auth_group_permissions         auth_group_permissions[]
  django_content_type            django_content_type              @relation(fields: [content_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_permission_content_type_id_2f476e4b_fk_django_co")

  @@unique([content_type_id, codename], map: "auth_permission_content_type_id_codename_01ab375a_uniq")
  @@index([content_type_id], map: "auth_permission_content_type_id_2f476e4b")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model django_admin_log {
  id                  Int                  @id @default(autoincrement())
  action_time         DateTime             @db.Timestamptz(6)
  object_id           String?
  object_repr         String               @db.VarChar(200)
  action_flag         Int                  @db.SmallInt
  change_message      String
  content_type_id     Int?
  user_id             BigInt
  django_content_type django_content_type? @relation(fields: [content_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "django_admin_log_content_type_id_c4bce8eb_fk_django_co")
  accounts_user       accounts_user        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "django_admin_log_user_id_c564eba6_fk_accounts_user_id")

  @@index([content_type_id], map: "django_admin_log_content_type_id_c4bce8eb")
  @@index([user_id], map: "django_admin_log_user_id_c564eba6")
}

model django_content_type {
  id               Int                @id @default(autoincrement())
  app_label        String             @db.VarChar(100)
  model            String             @db.VarChar(100)
  auth_permission  auth_permission[]
  django_admin_log django_admin_log[]

  @@unique([app_label, model], map: "django_content_type_app_label_model_76bd3d3b_uniq")
}

model django_migrations {
  id      BigInt   @id @default(autoincrement())
  app     String   @db.VarChar(255)
  name    String   @db.VarChar(255)
  applied DateTime @db.Timestamptz(6)
}

model django_session {
  session_key  String   @id @db.VarChar(40)
  session_data String
  expire_date  DateTime @db.Timestamptz(6)

  @@index([expire_date], map: "django_session_expire_date_a5c62663")
  @@index([session_key], map: "django_session_session_key_c0390e0f_like")
}

model django_site {
  id                            Int                             @id @default(autoincrement())
  domain                        String                          @unique(map: "django_site_domain_a2e37b91_uniq") @db.VarChar(100)
  name                          String                          @db.VarChar(50)
  socialaccount_socialapp_sites socialaccount_socialapp_sites[]

  @@index([domain], map: "django_site_domain_a2e37b91_like")
}

model schedule_category {
  id                        BigInt                      @id @default(autoincrement())
  name                      String                      @db.VarChar(50)
  colour_theme              String                      @db.VarChar(32)
  icon                      String                      @db.VarChar(32)
  schedule_event            schedule_event[]
  schedule_event_categories schedule_event_categories[]
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model schedule_event {
  id                          BigInt                        @id @default(autoincrement())
  title                       String                        @db.VarChar(200)
  public_description          String?
  organisation_id             BigInt?
  submission_id               Int?
  estimated_duration          Unsupported("interval")?
  preferred_occurrences       Int
  org_notes                   String?
  tech_notes                  String?
  data_collected              Boolean
  advertisement_weight        Int
  primary_category_id         BigInt?
  slug                        String?                       @unique @db.VarChar(50)
  digital_signage             Boolean
  published                   Boolean
  schedule_organisation       schedule_organisation?        @relation(fields: [organisation_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "schedule_event_organisation_id_ef1f6527_fk_schedule_")
  schedule_category           schedule_category?            @relation(fields: [primary_category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "schedule_event_primary_category_id_5c062bfa_fk_schedule_")
  schedule_event_admins       schedule_event_admins[]
  schedule_event_categories   schedule_event_categories[]
  schedule_event_participants schedule_event_participants[]
  schedule_eventinstance      schedule_eventinstance[]

  @@index([organisation_id], map: "schedule_event_organisation_id_ef1f6527")
  @@index([primary_category_id], map: "schedule_event_primary_category_id_5c062bfa")
  @@index([slug], map: "schedule_event_slug_ea38f3a0_like")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model schedule_event_admins {
  id             BigInt         @id @default(autoincrement())
  event_id       BigInt
  user_id        BigInt
  schedule_event schedule_event @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "schedule_event_admins_event_id_9563fe83_fk_schedule_event_id")
  accounts_user  accounts_user  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "schedule_event_admins_user_id_696f3e34_fk_accounts_user_id")

  @@unique([event_id, user_id], map: "schedule_event_admins_event_id_user_id_d0a2c916_uniq")
  @@index([event_id], map: "schedule_event_admins_event_id_9563fe83")
  @@index([user_id], map: "schedule_event_admins_user_id_696f3e34")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model schedule_event_categories {
  id                BigInt            @id @default(autoincrement())
  event_id          BigInt
  category_id       BigInt
  schedule_category schedule_category @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "schedule_event_categ_category_id_67f54109_fk_schedule_")
  schedule_event    schedule_event    @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "schedule_event_categ_event_id_1a5e067f_fk_schedule_")

  @@unique([event_id, category_id], map: "schedule_event_categories_event_id_category_id_87417748_uniq")
  @@index([category_id], map: "schedule_event_categories_category_id_67f54109")
  @@index([event_id], map: "schedule_event_categories_event_id_1a5e067f")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model schedule_event_participants {
  id             BigInt         @id @default(autoincrement())
  event_id       BigInt
  user_id        BigInt
  schedule_event schedule_event @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "schedule_event_parti_event_id_bf2e8d4b_fk_schedule_")
  accounts_user  accounts_user  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "schedule_event_parti_user_id_166e9170_fk_accounts_")

  @@unique([event_id, user_id], map: "schedule_event_participants_event_id_user_id_a2deb9f6_uniq")
  @@index([event_id], map: "schedule_event_participants_event_id_bf2e8d4b")
  @@index([user_id], map: "schedule_event_participants_user_id_166e9170")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model schedule_eventinstance {
  id                           BigInt                   @id @default(autoincrement())
  start                        DateTime                 @db.Timestamptz(6)
  end                          DateTime                 @db.Timestamptz(6)
  event_id                     BigInt
  parent_id                    BigInt?
  venue_id                     BigInt
  published                    Boolean
  schedule_eventinstance       schedule_eventinstance?  @relation("schedule_eventinstanceToschedule_eventinstance", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "schedule_eventinstan_parent_id_56de69e9_fk_schedule_")
  other_schedule_eventinstance schedule_eventinstance[] @relation("schedule_eventinstanceToschedule_eventinstance")
  schedule_event               schedule_event           @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "schedule_eventinstance_event_id_f44b749e_fk_schedule_event_id")
  schedule_venue               schedule_venue           @relation(fields: [venue_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "schedule_eventinstance_venue_id_422c127e_fk_schedule_venue_id")

  @@index([event_id], map: "schedule_eventinstance_event_id_f44b749e")
  @@index([parent_id], map: "schedule_eventinstance_parent_id_56de69e9")
  @@index([venue_id], map: "schedule_eventinstance_venue_id_422c127e")
}

model schedule_organisation {
  id             BigInt           @id @default(autoincrement())
  name           String           @db.VarChar(200)
  description    String?
  slug           String?          @unique @db.VarChar(50)
  schedule_event schedule_event[]

  @@index([slug], map: "schedule_organisation_slug_3094a96f_like")
}

model schedule_venue {
  id                     BigInt                   @id @default(autoincrement())
  name                   String                   @db.VarChar(200)
  description            String
  campus_map_url         String?                  @db.VarChar
  slug                   String?                  @unique @db.VarChar(50)
  schedule_eventinstance schedule_eventinstance[]

  @@index([slug], map: "schedule_venue_slug_f3d3b124_like")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model socialaccount_socialaccount {
  id                        Int                         @id @default(autoincrement())
  provider                  String                      @db.VarChar(200)
  uid                       String                      @db.VarChar(191)
  last_login                DateTime                    @db.Timestamptz(6)
  date_joined               DateTime                    @db.Timestamptz(6)
  extra_data                Json
  user_id                   BigInt
  accounts_user             accounts_user               @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "socialaccount_social_user_id_8146e70c_fk_accounts_")
  socialaccount_socialtoken socialaccount_socialtoken[]

  @@unique([provider, uid], map: "socialaccount_socialaccount_provider_uid_fc810c6e_uniq")
  @@index([user_id], map: "socialaccount_socialaccount_user_id_8146e70c")
}

model socialaccount_socialapp {
  id                            Int                             @id @default(autoincrement())
  provider                      String                          @db.VarChar(30)
  name                          String                          @db.VarChar(40)
  client_id                     String                          @db.VarChar(191)
  secret                        String                          @db.VarChar(191)
  key                           String                          @db.VarChar(191)
  provider_id                   String                          @db.VarChar(200)
  settings                      Json
  socialaccount_socialapp_sites socialaccount_socialapp_sites[]
  socialaccount_socialtoken     socialaccount_socialtoken[]
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model socialaccount_socialapp_sites {
  id                      BigInt                  @id @default(autoincrement())
  socialapp_id            Int
  site_id                 Int
  django_site             django_site             @relation(fields: [site_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "socialaccount_social_site_id_2579dee5_fk_django_si")
  socialaccount_socialapp socialaccount_socialapp @relation(fields: [socialapp_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "socialaccount_social_socialapp_id_97fb6e7d_fk_socialacc")

  @@unique([socialapp_id, site_id], map: "socialaccount_socialapp__socialapp_id_site_id_71a9a768_uniq")
  @@index([site_id], map: "socialaccount_socialapp_sites_site_id_2579dee5")
  @@index([socialapp_id], map: "socialaccount_socialapp_sites_socialapp_id_97fb6e7d")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model socialaccount_socialtoken {
  id                          Int                         @id @default(autoincrement())
  token                       String
  token_secret                String
  expires_at                  DateTime?                   @db.Timestamptz(6)
  account_id                  Int
  app_id                      Int?
  socialaccount_socialaccount socialaccount_socialaccount @relation(fields: [account_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "socialaccount_social_account_id_951f210e_fk_socialacc")
  socialaccount_socialapp     socialaccount_socialapp?    @relation(fields: [app_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "socialaccount_social_app_id_636a42d7_fk_socialacc")

  @@unique([app_id, account_id], map: "socialaccount_socialtoken_app_id_account_id_fca4e0ac_uniq")
  @@index([account_id], map: "socialaccount_socialtoken_account_id_951f210e")
  @@index([app_id], map: "socialaccount_socialtoken_app_id_636a42d7")
}
